{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mihir\\\\OneDrive\\\\Desktop\\\\New folder\\\\virtual_lab\\\\src\\\\Layout\\\\PLSQL\\\\Exceptions.js\";\nimport React from 'react';\nimport PlsqlMenu from './PlsqlMenu';\nimport Layout from '../Layout';\nimport one from \"./plsql_exp_1.PNG\";\nimport two from \"./plsql_exp_2.PNG\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Exceptions = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-flui m-3 p-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-3\",\n            children: /*#__PURE__*/_jsxDEV(PlsqlMenu, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 13,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-9\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \" PL/SQL Exceptions \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 6\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"PL/SQL exceptions are errors or abnormal conditions that can occur during the execution of a PL/SQL program. Exceptions allow developers to handle unexpected situations gracefully, providing a mechanism to capture and manage errors, prevent application crashes, and ensure proper error reporting to users and administrators. PL/SQL provides a structured way to handle exceptions using blocks of code that catch and manage specific error conditions.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 1\n              }, this), \"Types of Exceptions:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 22,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 22,\n                columnNumber: 30\n              }, this), \"Predefined Exceptions: These are standard exceptions provided by PL/SQL, covering common error scenarios. Examples include NO_DATA_FOUND, TOO_MANY_ROWS, and ZERO_DIVIDE.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 25,\n                columnNumber: 1\n              }, this), \"User-Defined Exceptions: Developers can define custom exceptions to handle specific application-related errors.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 1\n              }, this), \"Exception Handling Syntax:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 1\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: one,\n                  alt: \"Image of plsql_exp_1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 31,\n                  columnNumber: 3\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 1\n              }, this), \"Explanation:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 1\n              }, this), \"DECLARE: Marks the beginning of the PL/SQL block.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 50\n              }, this), \"exception_name1, exception_name2, etc.: The predefined or user-defined exceptions being caught.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 96\n              }, this), \"Code to handle exception: Code block to handle the specific exception.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 71\n              }, this), \"EXCEPTION: Marks the beginning of the exception handling block.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 64\n              }, this), \"WHEN exception_name: Specifies which exception is being handled.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 65\n              }, this), \"Additional exception handlers: More handlers can be added to handle different exceptions.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 90\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 1\n              }, this), \"Example of Exception Handling:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: two,\n                  alt: \"Image of plsql_exp_2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 3\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 1\n              }, this), \"Explanation:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 13\n              }, this), \"In this example, an error occurs when the balance goes negative. The VALUE_ERROR exception is raised explicitly. The code block under WHEN VALUE_ERROR handles the error by displaying an error message. If any other exception occurs (WHEN OTHERS), a generic error message is displayed.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 1\n              }, this), \"Advantages of Exception Handling:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 34\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 1\n              }, this), \"Graceful Error Handling: Exceptions provide a structured way to handle errors, ensuring that the program doesn't crash due to unexpected situations.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 149\n              }, this), \"Error Reporting: Exception messages can be tailored to provide meaningful information to users and administrators.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 115\n              }, this), \"Modularization: Exception handling code can be centralized, making it easier to manage and update.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 99\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 108\n              }, this), \"Considerations:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 16\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 1\n              }, this), \"Overusing exceptions can make code harder to understand and maintain.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 70\n              }, this), \"Exception handlers should not hide underlying issues but rather provide informative error messages.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 100\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 109\n              }, this), \"Conclusion:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 12\n              }, this), \"Exception handling is a crucial aspect of writing robust and reliable PL/SQL programs. By anticipating and managing errors effectively, developers can ensure that their applications respond gracefully to unexpected situations, enhancing user experience and maintaining data integrity. Properly designed exception handling helps in troubleshooting, debugging, and maintaining the stability of database applications.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 1\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 6\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 2\n  }, this);\n};\n_c = Exceptions;\nexport default Exceptions;\nvar _c;\n$RefreshReg$(_c, \"Exceptions\");","map":{"version":3,"names":["React","PlsqlMenu","Layout","one","two","jsxDEV","_jsxDEV","Exceptions","children","className","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/mihir/OneDrive/Desktop/New folder/virtual_lab/src/Layout/PLSQL/Exceptions.js"],"sourcesContent":["import React from 'react'\r\nimport PlsqlMenu from './PlsqlMenu'\r\nimport Layout from '../Layout'\r\nimport one from \"./plsql_exp_1.PNG\";\r\nimport two from \"./plsql_exp_2.PNG\";\r\nconst Exceptions = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <PlsqlMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1> PL/SQL Exceptions </h1>\r\n\t\t\t\t <p>\r\n\r\nPL/SQL exceptions are errors or abnormal conditions that can occur during the execution of a PL/SQL program. Exceptions allow developers to handle unexpected situations gracefully, providing a mechanism to capture and manage errors, prevent application crashes, and ensure proper error reporting to users and administrators. PL/SQL provides a structured way to handle exceptions using blocks of code that catch and manage specific error conditions.\r\n<br></br>\r\nTypes of Exceptions:<br></br><br></br>\r\n\r\nPredefined Exceptions: These are standard exceptions provided by PL/SQL, covering common error scenarios. Examples include NO_DATA_FOUND, TOO_MANY_ROWS, and ZERO_DIVIDE.\r\n<br></br>\r\nUser-Defined Exceptions: Developers can define custom exceptions to handle specific application-related errors.\r\n<br></br>\r\nException Handling Syntax:\r\n<br></br>\r\n<div>\r\n  <img src={one} alt=\"Image of plsql_exp_1\" />\r\n</div>\r\n\r\nExplanation:<br></br>\r\n<br></br>\r\nDECLARE: Marks the beginning of the PL/SQL block.<br></br>\r\nexception_name1, exception_name2, etc.: The predefined or user-defined exceptions being caught.<br></br>\r\nCode to handle exception: Code block to handle the specific exception.<br></br>\r\nEXCEPTION: Marks the beginning of the exception handling block.<br></br>\r\nWHEN exception_name: Specifies which exception is being handled.<br></br>\r\nAdditional exception handlers: More handlers can be added to handle different exceptions.<br></br>\r\n<br></br>\r\nExample of Exception Handling:<br></br>\r\n\r\n<div>\r\n  <img src={two} alt=\"Image of plsql_exp_2\" />\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\nExplanation:<br></br>\r\nIn this example, an error occurs when the balance goes negative. The VALUE_ERROR exception is raised explicitly. The code block under WHEN VALUE_ERROR handles the error by displaying an error message. If any other exception occurs (WHEN OTHERS), a generic error message is displayed.\r\n<br></br>\r\nAdvantages of Exception Handling:<br></br>\r\n<br></br>\r\nGraceful Error Handling: Exceptions provide a structured way to handle errors, ensuring that the program doesn't crash due to unexpected situations.<br></br>\r\nError Reporting: Exception messages can be tailored to provide meaningful information to users and administrators.<br></br>\r\nModularization: Exception handling code can be centralized, making it easier to manage and update.<br></br><br></br>\r\nConsiderations:<br></br>\r\n<br></br>\r\nOverusing exceptions can make code harder to understand and maintain.<br></br>\r\nException handlers should not hide underlying issues but rather provide informative error messages.<br></br><br></br>\r\nConclusion:<br></br>\r\n\r\nException handling is a crucial aspect of writing robust and reliable PL/SQL programs. By anticipating and managing errors effectively, developers can ensure that their applications respond gracefully to unexpected situations, enhancing user experience and maintaining data integrity. Properly designed exception handling helps in troubleshooting, debugging, and maintaining the stability of database applications.\r\n<br></br>\r\n\t\t\t\t </p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default Exceptions\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}