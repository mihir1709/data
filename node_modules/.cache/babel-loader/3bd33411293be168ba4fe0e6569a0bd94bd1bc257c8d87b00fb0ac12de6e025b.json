{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mihir\\\\OneDrive\\\\Desktop\\\\New folder\\\\virtual_lab\\\\src\\\\Layout\\\\normalization\\\\TwoNf.js\";\nimport React from 'react';\nimport Layout from '../Layout';\nimport NormalMenu from './NormalMenu';\nimport one from \"./2nf_1.PNG\";\nimport two from \"./2nf_2.PNG\";\nimport three from \"./2nf_3.PNG\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TwoNf = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-flui m-3 p-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-3\",\n            children: /*#__PURE__*/_jsxDEV(NormalMenu, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 16,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-9\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"2nd Normal Form (2NF)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 6\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The 2nd Normal Form (2NF) is a higher level of database normalization that builds upon the principles of the 1st Normal Form (1NF). It addresses issues related to partial dependencies within a relation (table) by ensuring that each non-key attribute is fully functionally dependent on the entire primary key. In simpler terms, it deals with the scenario where a composite primary key (made up of multiple attributes) has attributes that depend on only a part of that key.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 480\n              }, this), \"To meet the criteria of 2NF, a table must first be in 1NF. After that, the following conditions should be met:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 23,\n                columnNumber: 111\n              }, this), \"1. The table must have a primary key composed of one or more attributes.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 25,\n                columnNumber: 73\n              }, this), \"2. Non-key attributes (attributes not part of the primary key) must be fully functionally dependent on the entire primary key, meaning they should not be dependent on only a portion of the key.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 194\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 1\n              }, this), \"Example:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 9\n              }, this), \"Consider a table representing sales transactions, with attributes `OrderID`, `ProductID`, `ProductName`, and `ProductCategory`.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 128\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: one,\n                  alt: \"Image of 2nf1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 33,\n                  columnNumber: 3\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 1\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 1\n              }, this), \"Here, the primary key is `(OrderID, ProductID)`. However, `ProductName` and `ProductCategory` are dependent only on `ProductID`, which is a part of the composite primary key. This creates partial dependencies, violating 2NF.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 1\n              }, this), \"To bring the table into 2NF, we split it into two separate tables:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 1\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 1\n              }, this), \"Table 1: Orders\", /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: two,\n                  alt: \"Image of 2nf2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 3\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 1\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 1\n              }, this), \"Table 2: Products\", /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: three,\n                  alt: \"Image of 2nf3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 3\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 1\n              }, this), \"Now, each table has attributes that are fully functionally dependent on the respective primary keys (`OrderID` in the Orders table, and `ProductID` in the Products table).\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 6\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 2\n  }, this);\n};\n_c = TwoNf;\nexport default TwoNf;\nvar _c;\n$RefreshReg$(_c, \"TwoNf\");","map":{"version":3,"names":["React","Layout","NormalMenu","one","two","three","jsxDEV","_jsxDEV","TwoNf","children","className","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/mihir/OneDrive/Desktop/New folder/virtual_lab/src/Layout/normalization/TwoNf.js"],"sourcesContent":["import React from 'react'\r\nimport Layout from '../Layout'\r\nimport NormalMenu from './NormalMenu'\r\nimport one from \"./2nf_1.PNG\";\r\nimport two from \"./2nf_2.PNG\";\r\nimport three from \"./2nf_3.PNG\";\r\n\r\n\r\nconst TwoNf = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <NormalMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1>2nd Normal Form (2NF)</h1>\r\n\t\t\t\t <p>The 2nd Normal Form (2NF) is a higher level of database normalization that builds upon the principles of the 1st Normal Form (1NF). It addresses issues related to partial dependencies within a relation (table) by ensuring that each non-key attribute is fully functionally dependent on the entire primary key. In simpler terms, it deals with the scenario where a composite primary key (made up of multiple attributes) has attributes that depend on only a part of that key.<br></br>\r\n\r\nTo meet the criteria of 2NF, a table must first be in 1NF. After that, the following conditions should be met:<br></br>\r\n\r\n1. The table must have a primary key composed of one or more attributes.<br></br>\r\n2. Non-key attributes (attributes not part of the primary key) must be fully functionally dependent on the entire primary key, meaning they should not be dependent on only a portion of the key.<br></br>\r\n<br></br>\r\nExample:<br></br>\r\nConsider a table representing sales transactions, with attributes `OrderID`, `ProductID`, `ProductName`, and `ProductCategory`.<br></br>\r\n\r\n\r\n<div>\r\n  <img src={one} alt=\"Image of 2nf1\" />\r\n</div>\r\n\r\n\r\n<br></br>\r\nHere, the primary key is `(OrderID, ProductID)`. However, `ProductName` and `ProductCategory` are dependent only on `ProductID`, which is a part of the composite primary key. This creates partial dependencies, violating 2NF.\r\n<br></br>\r\nTo bring the table into 2NF, we split it into two separate tables:\r\n<br></br>\r\n<br></br>\r\n\r\nTable 1: Orders\r\n<div>\r\n  <img src={two} alt=\"Image of 2nf2\" />\r\n</div>\r\n<br></br>\r\nTable 2: Products\r\n<div>\r\n  <img src={three} alt=\"Image of 2nf3\" />\r\n</div>\r\n\r\n\r\n\r\n\r\nNow, each table has attributes that are fully functionally dependent on the respective primary keys (`OrderID` in the Orders table, and `ProductID` in the Products table).\r\n\r\n\r\n</p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default TwoNf\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}