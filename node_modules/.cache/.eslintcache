[{"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\index.js":"1","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\App.js":"2","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\reportWebVitals.js":"3","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\HomePage.js":"4","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\MainMenu\\ListOfExp.js":"5","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\MainMenu\\CppCo.js":"6","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\MainMenu\\DbmsCo.js":"7","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\MainMenu\\TarAud.js":"8","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\TwoNf.js":"9","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\OneNf.js":"10","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\BcNf.js":"11","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\ThreeNf.js":"12","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\AimObjNorm.js":"13","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\FourNf.js":"14","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\FiveNf.js":"15","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\PostTest.js":"16","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\Pretest.js":"17","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\RefnFeed.js":"18","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\Serial.js":"19","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\ConCurr.js":"20","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\AcidPro.js":"21","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\Trefnfeed.js":"22","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\AimnObj.js":"23","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\Tposttest.js":"24","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\Tpretest.js":"25","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Dml.js":"26","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Dcl.js":"27","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Joins.js":"28","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Sposttest.js":"29","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Saimobj.js":"30","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Ddl.js":"31","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Tcl.js":"32","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Srefnfeed.js":"33","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Spretest.js":"34","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Exceptions.js":"35","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Cursors.js":"36","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Pposttest.js":"37","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Procedure.js":"38","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Prefnfeed.js":"39","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Ppretest.js":"40","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Triggers.js":"41","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Paimobj.js":"42","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\DataMenu.js":"43","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Layout.js":"44","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\NormalMenu.js":"45","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\TransMenu.js":"46","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\PlsqlMenu.js":"47","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\SqlMenu.js":"48","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Header.js":"49","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Footer.js":"50"},{"size":554,"mtime":1693510625528,"results":"51","hashOfConfig":"52"},{"size":4839,"mtime":1693511567763,"results":"53","hashOfConfig":"52"},{"size":375,"mtime":1693510625528,"results":"54","hashOfConfig":"52"},{"size":440,"mtime":1693514001889,"results":"55","hashOfConfig":"52"},{"size":763,"mtime":1693511770099,"results":"56","hashOfConfig":"52"},{"size":2916,"mtime":1693511768868,"results":"57","hashOfConfig":"52"},{"size":3244,"mtime":1693511769483,"results":"58","hashOfConfig":"52"},{"size":2270,"mtime":1693511770723,"results":"59","hashOfConfig":"52"},{"size":2396,"mtime":1693510625528,"results":"60","hashOfConfig":"52"},{"size":2240,"mtime":1693510625528,"results":"61","hashOfConfig":"52"},{"size":456,"mtime":1693510625528,"results":"62","hashOfConfig":"52"},{"size":2246,"mtime":1693510625528,"results":"63","hashOfConfig":"52"},{"size":479,"mtime":1693510625528,"results":"64","hashOfConfig":"52"},{"size":2368,"mtime":1693510625528,"results":"65","hashOfConfig":"52"},{"size":3295,"mtime":1693510625528,"results":"66","hashOfConfig":"52"},{"size":3491,"mtime":1693510625528,"results":"67","hashOfConfig":"52"},{"size":3473,"mtime":1693510625528,"results":"68","hashOfConfig":"52"},{"size":450,"mtime":1693510625528,"results":"69","hashOfConfig":"52"},{"size":4145,"mtime":1693510625522,"results":"70","hashOfConfig":"52"},{"size":4480,"mtime":1693510625522,"results":"71","hashOfConfig":"52"},{"size":3824,"mtime":1693510625512,"results":"72","hashOfConfig":"52"},{"size":533,"mtime":1693510625522,"results":"73","hashOfConfig":"52"},{"size":529,"mtime":1693510625522,"results":"74","hashOfConfig":"52"},{"size":3490,"mtime":1693510625522,"results":"75","hashOfConfig":"52"},{"size":3491,"mtime":1693510625522,"results":"76","hashOfConfig":"52"},{"size":440,"mtime":1693510625512,"results":"77","hashOfConfig":"52"},{"size":442,"mtime":1693510625512,"results":"78","hashOfConfig":"52"},{"size":450,"mtime":1693510625512,"results":"79","hashOfConfig":"52"},{"size":3463,"mtime":1693510625512,"results":"80","hashOfConfig":"52"},{"size":472,"mtime":1693510625512,"results":"81","hashOfConfig":"52"},{"size":442,"mtime":1693510625512,"results":"82","hashOfConfig":"52"},{"size":440,"mtime":1693510625512,"results":"83","hashOfConfig":"52"},{"size":476,"mtime":1693511767693,"results":"84","hashOfConfig":"52"},{"size":3460,"mtime":1693510625512,"results":"85","hashOfConfig":"52"},{"size":3603,"mtime":1693510625496,"results":"86","hashOfConfig":"52"},{"size":4570,"mtime":1693510625496,"results":"87","hashOfConfig":"52"},{"size":3467,"mtime":1693510625512,"results":"88","hashOfConfig":"52"},{"size":3474,"mtime":1693510625512,"results":"89","hashOfConfig":"52"},{"size":481,"mtime":1693510625512,"results":"90","hashOfConfig":"52"},{"size":3090,"mtime":1693510625512,"results":"91","hashOfConfig":"52"},{"size":4109,"mtime":1693510625512,"results":"92","hashOfConfig":"52"},{"size":472,"mtime":1693510625496,"results":"93","hashOfConfig":"52"},{"size":157,"mtime":1693511249832,"results":"94","hashOfConfig":"52"},{"size":570,"mtime":1693511654260,"results":"95","hashOfConfig":"52"},{"size":1566,"mtime":1693510625528,"results":"96","hashOfConfig":"52"},{"size":1228,"mtime":1693510625522,"results":"97","hashOfConfig":"52"},{"size":1352,"mtime":1693510625496,"results":"98","hashOfConfig":"52"},{"size":1450,"mtime":1693510625512,"results":"99","hashOfConfig":"52"},{"size":1959,"mtime":1693512529208,"results":"100","hashOfConfig":"52"},{"size":521,"mtime":1693510625496,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bx3erj",{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","suppressedMessages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","suppressedMessages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},{"filePath":"251","messages":"252","suppressedMessages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","suppressedMessages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","suppressedMessages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\index.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\App.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\reportWebVitals.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\HomePage.js",["269"],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\MainMenu\\ListOfExp.js",["270"],[],"import React from 'react'\r\nimport Layout from '../Layout'\r\nimport DataMenu from '../DataMenu'\r\nimport { NavLink } from 'react-router-dom'\r\nconst ListOfExp = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1>List OF Experiments</h1>\r\n\t\t\t\t <ul>\r\n\t\t\t\t\t   <li>\r\n\t\t\t\t\t\t<NavLink to=\"normal\"> Normalization</NavLink>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<NavLink to=\"trans\"> Transaction</NavLink>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<NavLink to=\"sql\"> SQL</NavLink>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<NavLink to=\"plsql\"> plsql </NavLink>\r\n\t\t\t\t\t   </li>\r\n\t\t\t\t </ul>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default ListOfExp\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\MainMenu\\CppCo.js",["271"],[],"import React from 'react'\r\nimport DataMenu from '../DataMenu'\r\nimport Layout from '../Layout'\r\nconst CppCo = () => {\r\n  return (\r\n\t<div>\r\n\t\t <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t   <div>\r\n\t\t\t\t <h1>Objectives</h1>\r\n\t\t\t\t <p>The objective of the DBMS (Database Management Systems) Virtual Lab developed by the students of Sardar Patel Institute of Technology is to provide a dynamic and immersive platform that enhances the understanding of Database Management Systems through interactive exploration. This virtual lab aims to augment traditional lectures, reading materials, and programming labs by offering an enriched learning experience in the following ways:</p>\r\n\r\n<p>1. Visualize Database Concepts: The DBMS Virtual Lab aims to offer students a visual representation of abstract database concepts. Through interactive visual animations, students can grasp complex database structures, relationships, and operations in a more intuitive manner. These visualizations bridge the gap between theoretical concepts and practical implementations, fostering a deeper understanding.</p>\r\n\r\n<p>2. Execute Database Operations: This virtual lab goes beyond traditional learning methods by allowing students to actively engage with database operations. By providing an environment where students can interactively execute queries, transactions, and manipulations on a simulated database, the lab empowers students to directly witness the outcomes of their actions. This hands-on approach enhances comprehension and skill development.</p>\r\n\r\n\r\n<p>3. Evaluate Performance Metrics: Understanding the efficiency and effectiveness of database operations is crucial. The DBMS Virtual Lab enables students to interactively compute the performance metrics associated with different data structures and algorithms. By varying parameters and observing the resulting costs, students gain insights into how various design choices impact the performance of database operations.</p>\r\n\r\n\r\n<p>In essence, the DBMS Virtual Lab aims to create an environment where students can actively participate in the learning process, bridging theoretical knowledge with practical application. By offering interactive visualizations, execution of operations, and performance evaluation, the lab equips students with a comprehensive understanding of Database Management Systems. Whether aspiring to be a database administrator, software developer, or data analyst, this lab nurtures skills that are essential for success in today's data-driven world. Through the DBMS Virtual Lab, students can embark on a journey of discovery, experimentation, and mastery of database concepts that are foundational in the realm of computer science and information technology.\r\n\r\n</p>\r\n\t\t\t\t</div>\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t\t</div>\r\n  )\r\n}\r\n\r\nexport default CppCo\r\n\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\MainMenu\\DbmsCo.js",["272"],[],"import React from 'react'\r\nimport Layout from '../Layout';\r\nimport DataMenu from '../DataMenu';\r\nexport default function DbmsCo() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1>Introduction</h1>\r\n\t\t\t\t <p>Welcome to the DBMS (Database Management Systems) Virtual Lab developed by the students of Sardar Patel Institute of Technology. The DBMS Virtual Lab offers a comprehensive platform designed to enhance your understanding of Database Management Systems, a fundamental component of computer science and information technology. In today's technological landscape, where data powers every aspect of our digital world, mastering the concepts and practical aspects of DBMS is essential for a wide array of applications, ranging from software development to data-driven decision-making.\r\n\r\nThe DBMS course forms an integral part of computer science and information technology curricula, providing students with insights into the design, organization, and manipulation of data. With databases being the backbone of countless applications, including but not limited to business, e-commerce, healthcare, and finance, a strong foundation in DBMS is paramount.\r\n\r\nThis virtual lab is thoughtfully curated to bridge the gap between theoretical knowledge and hands-on implementation. Students often encounter challenges when it comes to visualizing how different operations and queries interact with a database. This lab is here to address these challenges by offering interactive experiments that allow students to practically experience the effects of various database operations, queries, and transactions. By engaging in these virtual experiments, students will gain a deeper understanding of the inner workings of databases, how data is stored, retrieved, and manipulated.\r\n\r\nOne of the key aspects of this lab is to help students comprehend the intricacies of structuring data effectively and efficiently. Through interactive simulations, you will be able to witness how different algorithms and operations impact the performance of a database. Additionally, you will have the opportunity to analyze and reason about the time and space complexities associated with various database operations, providing a holistic perspective on performance optimization.\r\n\r\nJust as data structures lay the foundation for various computer science subjects, a solid grasp of DBMS principles is pivotal for fields such as web development, data science, and enterprise software development. Whether you're aspiring to be a software engineer, data analyst, or database administrator, the DBMS Virtual Lab will empower you with the skills and insights needed to excel in your chosen career path.\r\n\r\nSo, dive into the world of databases through our interactive experiments, and embark on a journey of discovery and learning. Explore the intricacies of database design, experiment with real-world scenarios, and master the art of harnessing data for impactful solutions. The DBMS Virtual Lab is your gateway to unlocking the potential of data management in the digital age.\r\n</p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t\t</div>\r\n\t  );\r\n};\r\n\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\MainMenu\\TarAud.js",["273"],[],"import React from 'react'\r\nimport Layout from '../Layout'\r\nimport DataMenu from '../DataMenu'\r\nconst TarAud = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1>Target Audience</h1>\r\n\t\t\t\t <h2>Undergraduate (UG) Level:</h2>\r\n<h3>DBMS Course for B.Tech./B.E. and B.Sc./B.C.A. Students </h3>\r\n<p>The DBMS (Database Management Systems) course is tailored to cater to the needs of first and second-year students pursuing a B.Tech./B.E. in Computer Science & Information Technology, as well as those enrolled in B.Sc./B.C.A programs in Computer Science. This foundational course provides a comprehensive introduction to the principles and practices of managing data effectively in modern information systems.</p>\r\n\r\n<p>By the end of this course, UG students will possess a strong foundation in database management, enabling them to work with data in a structured and organized manner. Whether students are aiming to become proficient software developers, data analysts, or pursue further studies in the field, the DBMS course equips them with the skills and knowledge necessary for success in the realm of data-driven technology.</p>\r\n\r\n<h2>Postgraduate (PG) Level:</h2>\r\n<h3>DBMS Course for M.Tech./M.E. and MCA Students</h3>\r\n<p>The DBMS (Database Management Systems) course at the postgraduate level is designed to cater to students pursuing M.Tech./M.E. and MCA degrees in fields such as Computer Science, Information Technology, Compilers, Operating Systems, Databases, AI, and Software Engineering. This advanced course delves into the intricate aspects of database management, building upon the foundational knowledge acquired at the undergraduate level.</p>\r\n\r\n<p>The DBMS course at the PG level equips students with the expertise needed to tackle real-world challenges in the management of large-scale data systems. Aspiring database administrators, software architects, and researchers will find this course invaluable as it provides them with the skills to design, implement, and optimize databases that meet the demands of modern applications.\r\n</p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default TarAud\r\n\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\TwoNf.js",["274","275","276"],[],"import React from 'react'\r\nimport Layout from '../Layout'\r\nimport NormalMenu from './NormalMenu'\r\nimport one from \"./2nf_1.PNG\";\r\nimport two from \"./2nf_2.PNG\";\r\nimport three from \"./2nf_3.PNG\";\r\n\r\n\r\nconst TwoNf = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <NormalMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1>2nd Normal Form (2NF)</h1>\r\n\t\t\t\t <p>The 2nd Normal Form (2NF) is a higher level of database normalization that builds upon the principles of the 1st Normal Form (1NF). It addresses issues related to partial dependencies within a relation (table) by ensuring that each non-key attribute is fully functionally dependent on the entire primary key. In simpler terms, it deals with the scenario where a composite primary key (made up of multiple attributes) has attributes that depend on only a part of that key.<br></br>\r\n\r\nTo meet the criteria of 2NF, a table must first be in 1NF. After that, the following conditions should be met:<br></br>\r\n\r\n1. The table must have a primary key composed of one or more attributes.<br></br>\r\n2. Non-key attributes (attributes not part of the primary key) must be fully functionally dependent on the entire primary key, meaning they should not be dependent on only a portion of the key.<br></br>\r\n<br></br>\r\nExample:<br></br>\r\nConsider a table representing sales transactions, with attributes `OrderID`, `ProductID`, `ProductName`, and `ProductCategory`.<br></br>\r\n\r\n\r\n<div>\r\n  <img src={one} alt=\"Image of 2nf1\" />\r\n</div>\r\n\r\n\r\n<br></br>\r\nHere, the primary key is `(OrderID, ProductID)`. However, `ProductName` and `ProductCategory` are dependent only on `ProductID`, which is a part of the composite primary key. This creates partial dependencies, violating 2NF.\r\n<br></br>\r\nTo bring the table into 2NF, we split it into two separate tables:\r\n<br></br>\r\n<br></br>\r\n\r\nTable 1: Orders\r\n<div>\r\n  <img src={two} alt=\"Image of 2nf2\" />\r\n</div>\r\n<br></br>\r\nTable 2: Products\r\n<div>\r\n  <img src={three} alt=\"Image of 2nf3\" />\r\n</div>\r\n\r\n\r\n\r\n\r\nNow, each table has attributes that are fully functionally dependent on the respective primary keys (`OrderID` in the Orders table, and `ProductID` in the Products table).\r\n\r\n\r\n</p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default TwoNf\r\n\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\OneNf.js",["277","278"],[],"import React from 'react'\r\nimport NormalMenu from './NormalMenu'\r\nimport Layout from '../Layout'\r\nimport rea from \"./1nf_1.jpg\";\r\nimport res from \"./1nf_2.PNG\"\r\nconst OneNf = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <NormalMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1>1NF</h1>\r\n\t\t\t\t <h3>Normalization</h3>\r\n\t\t\t\t <p>Normalization is a database design technique that helps organize data in a structured manner to minimize data redundancy and ensure data integrity. It involves breaking down a complex database into smaller, related tables while adhering to certain rules or normal forms. Each normal form has its own set of criteria that must be met to ensure efficient data management and querying.\r\n\t\t\t\t <br></br>\r\n\t\t\t\t <br></br>\r\n\r\n\r\n<h3>1st Normal Form (1NF)</h3>\r\n1st Normal Form (1NF) is the most basic level of normalization. A table is said to be in 1NF if it meets the following conditions:\t\t\t\t <br></br>\r\n\r\n\r\n1. Atomic Values: Each column in a table must hold atomic (indivisible) values. This means that a column should not contain multiple values or arrays. Every value should be indivisible, ensuring that each piece of data is unique and meaningful.\t\t\t\t <br></br>\r\n\r\n\r\n2. No Repeating Groups: A column cannot contain a list or a set of values. All the values within a column must be of the same data type, and each row should hold a single value for that column.\t\t\t\t <br></br>\r\n\r\n\r\n3. Unique Column Names: Each column in the table should have a unique name that identifies the data it holds. This helps in distinguishing between different attributes.\t\t\t\t <br></br>\r\n\r\n\r\nExample:\t\t\t <br></br>\r\n\r\nConsider a table containing information about students and their subjects:\t\t\t\r\n<div>\r\n  <img src={rea} alt=\"Image of 1nf1\" />\r\n</div>\r\n\r\n\r\n\r\nThis table violates 1NF because the \"Subjects\" column contains multiple values in a single row. To bring it into 1NF, we need to break down the \"Subjects\" column into separate rows:\t\t\t\t <br></br>\r\n<div>\r\n  <img src={res} alt=\"Image of 1nf2\" />\r\n</div>\r\n</p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default OneNf\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\BcNf.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\ThreeNf.js",["279","280","281"],[],"import React from 'react'\r\nimport Layout from '../Layout'\r\nimport NormalMenu from './NormalMenu'\r\nimport one from \"./3nf_1.PNG\";\r\nimport two from \"./3nf_2.PNG\";\r\nimport three from \"./3nf_3.PNG\";\r\nconst ThreeNf = () => {\r\n  return (\r\n\t<div>\r\n\t  <div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <NormalMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <p>\r\n\t\t\t\t <h1>3rd Normal Form (3NF)\r\n</h1><br></br>\r\nThe 3rd Normal Form (3NF) is a further level of database normalization that builds upon the principles of the 2nd Normal Form (2NF). It addresses issues related to transitive dependencies within a relation (table) by ensuring that non-key attributes are only dependent on the primary key and not on other non-key attributes.\r\n<br></br>\r\nTo achieve 3NF, a table must first be in both the 1st Normal Form (1NF) and the 2nd Normal Form (2NF). After that, the following conditions should be met:\r\n<br></br>\r\n1. The table must have a primary key composed of one or more attributes.<br></br>\r\n2. Non-key attributes must be directly dependent on the entire primary key and not on other non-key attributes.<br></br>\r\n\r\nExample:<br></br>\r\nConsider a table representing courses and their instructors, with attributes `CourseCode`, `CourseName`, `Instructor`, and `InstructorLocation`.\r\n<br></br>\r\n<div>\r\n  <img src={one} alt=\"Image of 3nf1\" />\r\n</div>\r\n\r\n\r\nHere, the primary key is `CourseCode`. The `InstructorLocation` attribute depends on the instructor's name (`Instructor`), which is a non-key attribute. This creates a transitive dependency, violating 3NF.\r\n<br></br>\r\n\r\n\r\n\r\n\r\n\r\nTo bring the table into 3NF, we split it into two separate tables:\r\n<br></br>\r\n\r\n\r\nTable 1: Courses\r\n<br></br>\r\n<div>\r\n  <img src={two} alt=\"Image of 3nf2\" />\r\n</div>\r\n\r\n\r\nTable 2: Instructors\r\n<br></br>\r\n<div>\r\n  <img src={three} alt=\"Image of 3nf3\" />\r\n</div>\r\n\r\n\r\nNow, each table has attributes that are directly dependent on the respective primary keys (`CourseCode` in the Courses table and `Instructor` in the Instructors table).\r\n<br></br>\r\n\r\n\t\t\t\t </p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default ThreeNf\r\n\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\AimObjNorm.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\FourNf.js",["282","283","284","285"],[],"import React from 'react'\r\nimport Layout from '../Layout'\r\nimport NormalMenu from './NormalMenu'\r\nimport one from \"./4nf_1.PNG\";\r\nimport two from \"./4nf_2.PNG\";\r\nimport three from \"./4nf_3.PNG\";\r\nimport four from \"./4nf_4.PNG\";\r\nconst FourNf = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <NormalMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <p>\r\n\t\t\t\t <h1>4th Normal Form (4NF) </h1><br></br>\r\n\r\nThe 4th Normal Form (4NF) is a level of database normalization that builds upon the principles of the 3rd Normal Form (3NF). It addresses issues related to multi-valued dependencies within a relation (table) by ensuring that attributes are functionally dependent only on the primary key and not on other non-key attributes.\r\n<br></br>\r\nTo achieve 4NF, a table must first be in the 1st Normal Form (1NF), 2nd Normal Form (2NF), and 3rd Normal Form (3NF). After that, the following condition should be met:\r\n<br></br>\r\n1. The table must have a primary key composed of one or more attributes.<br></br>\r\n2. No multi-valued dependencies exist, meaning non-key attributes are not functionally dependent on portions of the primary key.<br></br>\r\n\r\nExample:<br></br>\r\nConsider a table representing students, their courses, and the textbooks required, with attributes `StudentID`, `StudentName`, `Course`, and `Textbook`.\r\n<br></br>\r\n<div>\r\n  <img src={one} alt=\"Image of 4nf1\" />\r\n</div>\r\n\r\n\r\nHere, the primary key is `(StudentID, Course)`. The `Textbook` attribute depends on both `StudentID` and `Course`, which creates a multi-valued dependency, violating 4NF.\r\n<br></br>\r\nTo bring the table into 4NF, we split it into three separate tables:\r\n<br></br>\r\nTable 1: Students\r\n<div>\r\n  <img src={two} alt=\"Image of 4nf2\" />\r\n</div>\r\n<br></br>\r\nTable 2: Courses\r\n<div>\r\n  <img src={three} alt=\"Image of 4nf3\" />\r\n</div>\r\n<br></br>\r\n\r\nTable 3: Textbooks\r\n<div>\r\n  <img src={four} alt=\"Image of 4nf4\" />\r\n</div>\r\n<br></br>\r\n\r\n\r\n\r\nNow, each table has attributes that are functionally dependent only on the respective primary keys (`StudentID` in the Students table, `Course` in the Courses table, and `Course` in the Textbooks table).\r\n<br></br>\r\n\r\n\t\t\t\t </p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default FourNf\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\FiveNf.js",["286","287","288","289"],[],"import React from 'react'\r\nimport Layout from '../Layout'\r\nimport NormalMenu from './NormalMenu'\r\nimport one from \"./5NF_1.PNG\";\r\nimport two from \"./5NF_2.PNG\";\r\nimport three from \"./5NF_3.PNG\";\r\nimport four from \"./5NF_4.PNG\";\r\nconst FiveNf = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <NormalMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <p>\r\n\r\n<h1>th Normal Form (5NF)</h1>\r\n<br></br>\r\n\r\nThe 5th Normal Form (5NF) represents the highest level of normalization in relational database design. It builds upon the principles of the lower normal forms (1NF, 2NF, 3NF, and 4NF) and aims to eliminate complex join dependencies while maximizing data integrity and minimizing redundancy.\r\n<br></br>\r\n<br></br>\r\n\r\n\r\nKey Concepts of 5NF:\r\n<br></br>\r\n\r\n1. Join Dependencies:5NF addresses the issue of join dependencies, which arise when a relation (table) can be reconstructed by joining multiple smaller tables. These dependencies can lead to data anomalies and complex relationships.\r\n<br></br>\r\n\r\n2. Candidate Keys: In 5NF, candidate keys play a crucial role. Candidate keys are sets of attributes that can uniquely identify each row in a table.\r\n<br></br>\r\n<br></br>\r\n\r\n\r\nConditions for 5NF:\r\n<br></br>\r\n<br></br>\r\n\r\n\r\nTo achieve 5NF, a database schema must adhere to the following conditions:\r\n<br></br>\r\n<br></br>\r\n\r\n\r\n1. 4NF Compliance:The schema must already be in 4th Normal Form (4NF), which includes eliminating multi-valued dependencies.\r\n<br></br>\r\n\r\n2. Minimal Join Dependencies: There should be no non-trivial join dependencies that cannot be inferred from the candidate keys. Non-trivial join dependencies are situations where a table can be reconstructed by joining other tables.\r\n<br></br>\r\n<br></br>\r\n\r\n\r\nExample:\r\n<br></br>\r\n\r\nConsider a database for a library with attributes `BookID`, `AuthorID`, `BookTitle`, `AuthorName`, and `Genre`.\r\n<br></br>\r\n<div>\r\n  <img src={one} alt=\"Image of 5nf1\" />\r\n</div>\r\n\r\n\r\n\r\nIn this example, `(BookID, AuthorID)` is the composite primary key. However, join dependencies exist because different authors are associated with the same book. This creates complex relationships and potential data anomalies, violating 5NF.\r\n<br></br>\r\n\r\nResolving into 5NF:\r\n<br></br>\r\n\r\nTo achieve 5NF, we decompose the table into separate tables, addressing the join dependencies:\r\n<br></br>\r\n\r\nTable 1: Books\r\n<div>\r\n  <img src={two} alt=\"Image of 5nf2\" />\r\n</div>\r\n<br></br>\r\n\r\n\r\nTable 2: Authors\r\n<div>\r\n  <img src={three} alt=\"Image of 5nf3\" />\r\n</div>\r\n<br></br>\r\n\r\n\r\n\r\nTable 3: BookAuthors\r\n<div>\r\n  <img src={four} alt=\"Image of 5nf4\" />\r\n</div>\r\n<br></br>\r\n\r\n\r\n\r\nNow, the database is in 5NF. Join dependencies have been eliminated by breaking down the complex relationships into separate tables. The relationships can be reconstructed using the candidate keys of the respective tables.\r\n<br></br>\r\n\r\n\r\nI hope this explanation in the requested format provides a clear understanding of 5NF and how it addresses complex join dependencies to achieve the highest level of normalization in a relational database.\r\n<br></br>\r\n\r\n\t\t\t\t </p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default FiveNf\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\PostTest.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\Pretest.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\RefnFeed.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\Serial.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\ConCurr.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\AcidPro.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\Trefnfeed.js",["290"],[],"import React from 'react'\r\nimport Layout from '../Layout'\r\nimport NormalMenu from '../normalization/NormalMenu'\r\nimport TransMenu from './TransMenu'\r\nconst Trefnfeed = () => {\r\n  return (\r\n\t<div>\r\n\t<Layout >\r\n\t\t<div className=\"container-flui m-3 p-3\">\r\n\t\t  <div className=\"row\">\r\n\t\t\t<div className=\"col-md-3\">\r\n\t\t\t <TransMenu/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col-md-9\">\r\n\t\t   \r\n\t\t\t   <h1>Reffernce and Feedback for transcation</h1>\r\n\t\t\t  \r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t  </Layout>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Trefnfeed\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\AimnObj.js",["291"],[],"import React from 'react'\r\nimport Layout from '../Layout'\r\nimport NormalMenu from '../normalization/NormalMenu'\r\nimport TransMenu from './TransMenu'\r\nconst AimnObj = () => {\r\n  return (\r\n\t<div>\r\n\t<Layout >\r\n\t\t<div className=\"container-flui m-3 p-3\">\r\n\t\t  <div className=\"row\">\r\n\t\t\t<div className=\"col-md-3\">\r\n\t\t\t <TransMenu/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col-md-9\">\r\n\t\t   \r\n\t\t\t   <h1>Aim and Objective info for Transaction</h1>\r\n\t\t\t  \r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t  </Layout>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default AimnObj\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\Tposttest.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\Tpretest.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Dml.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Dcl.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Joins.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Sposttest.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Saimobj.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Ddl.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Tcl.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Srefnfeed.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\Spretest.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Exceptions.js",["292","293"],[],"import React from 'react'\r\nimport PlsqlMenu from './PlsqlMenu'\r\nimport Layout from '../Layout'\r\nimport one from \"./plsql_exp_1.PNG\";\r\nimport two from \"./plsql_exp_2.PNG\";\r\nconst Exceptions = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <PlsqlMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1> PL/SQL Exceptions </h1>\r\n\t\t\t\t <p>\r\n\r\nPL/SQL exceptions are errors or abnormal conditions that can occur during the execution of a PL/SQL program. Exceptions allow developers to handle unexpected situations gracefully, providing a mechanism to capture and manage errors, prevent application crashes, and ensure proper error reporting to users and administrators. PL/SQL provides a structured way to handle exceptions using blocks of code that catch and manage specific error conditions.\r\n<br></br>\r\nTypes of Exceptions:<br></br><br></br>\r\n\r\nPredefined Exceptions: These are standard exceptions provided by PL/SQL, covering common error scenarios. Examples include NO_DATA_FOUND, TOO_MANY_ROWS, and ZERO_DIVIDE.\r\n<br></br>\r\nUser-Defined Exceptions: Developers can define custom exceptions to handle specific application-related errors.\r\n<br></br>\r\nException Handling Syntax:\r\n<br></br>\r\n<div>\r\n  <img src={one} alt=\"Image of plsql_exp_1\" />\r\n</div>\r\n\r\nExplanation:<br></br>\r\n<br></br>\r\nDECLARE: Marks the beginning of the PL/SQL block.<br></br>\r\nexception_name1, exception_name2, etc.: The predefined or user-defined exceptions being caught.<br></br>\r\nCode to handle exception: Code block to handle the specific exception.<br></br>\r\nEXCEPTION: Marks the beginning of the exception handling block.<br></br>\r\nWHEN exception_name: Specifies which exception is being handled.<br></br>\r\nAdditional exception handlers: More handlers can be added to handle different exceptions.<br></br>\r\n<br></br>\r\nExample of Exception Handling:<br></br>\r\n\r\n<div>\r\n  <img src={two} alt=\"Image of plsql_exp_2\" />\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\nExplanation:<br></br>\r\nIn this example, an error occurs when the balance goes negative. The VALUE_ERROR exception is raised explicitly. The code block under WHEN VALUE_ERROR handles the error by displaying an error message. If any other exception occurs (WHEN OTHERS), a generic error message is displayed.\r\n<br></br>\r\nAdvantages of Exception Handling:<br></br>\r\n<br></br>\r\nGraceful Error Handling: Exceptions provide a structured way to handle errors, ensuring that the program doesn't crash due to unexpected situations.<br></br>\r\nError Reporting: Exception messages can be tailored to provide meaningful information to users and administrators.<br></br>\r\nModularization: Exception handling code can be centralized, making it easier to manage and update.<br></br><br></br>\r\nConsiderations:<br></br>\r\n<br></br>\r\nOverusing exceptions can make code harder to understand and maintain.<br></br>\r\nException handlers should not hide underlying issues but rather provide informative error messages.<br></br><br></br>\r\nConclusion:<br></br>\r\n\r\nException handling is a crucial aspect of writing robust and reliable PL/SQL programs. By anticipating and managing errors effectively, developers can ensure that their applications respond gracefully to unexpected situations, enhancing user experience and maintaining data integrity. Properly designed exception handling helps in troubleshooting, debugging, and maintaining the stability of database applications.\r\n<br></br>\r\n\t\t\t\t </p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default Exceptions\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Cursors.js",["294"],[],"import React from 'react'\r\nimport PlsqlMenu from './PlsqlMenu'\r\nimport Layout from '../Layout'\r\nimport one from \"./plsql_cur_1.PNG\";\r\n\r\nconst Cursors = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <PlsqlMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1>PL/SQL Curosors</h1>\r\n\t\t\t\t <p>\r\n\t\t\t\t PL/SQL cursors are database objects used to process and manipulate the result sets returned by a SELECT statement. Cursors provide a way to retrieve and work with query results row by row, enabling developers to perform various operations on the retrieved data. Cursors are particularly useful when dealing with large datasets or when performing operations that involve multiple interactions with the database.\r\n<br></br>\r\nTypes of Cursors:<br></br>\r\n<br></br>\r\n\r\n\r\nImplicit Cursors: Automatically created by the database for every DML statement (INSERT, UPDATE, DELETE) and SELECT INTO statement. These cursors manage query results without explicit user intervention.\r\n<br></br>\r\n\r\nExplicit Cursors: Created and managed by developers explicitly to handle query results in a more controlled manner.\r\n<br></br>\r\n\r\nExplicit Cursor Syntax:\r\n<br></br>\r\n<div>\r\n  <img src={one} alt=\"Image of plsql_cur_1\" />\r\n</div>\r\n<br></br>\r\n\r\n\r\n\r\nExplanation:<br></br>\r\n<br></br>\r\n\r\n\r\nDECLARE: Marks the beginning of the PL/SQL block.<br></br>\r\n\r\ncursor_name: Name of the explicit cursor.<br></br>\r\n\r\nSELECT columns FROM table WHERE conditions: The SQL query defining the result set.<br></br>\r\n\r\nvariable_name: Variable used to store data fetched from the cursor.<br></br>\r\n\r\nOPEN cursor_name: Opens the cursor, initializing it for data retrieval.<br></br>\r\n\r\nLOOP: A loop to iterate through the rows retrieved from the cursor.<br></br>\r\n\r\nFETCH cursor_name INTO variable_name: Retrieves data from the cursor and stores it in the variable.<br></br>\r\n\r\nEXIT WHEN cursor_name%NOTFOUND: Exits the loop when there are no more rows to fetch.<br></br>\r\n\r\nCLOSE cursor_name: Closes the cursor after data processing.<br></br>\r\n\r\nEXCEPTION: Handles exceptions raised during cursor processing.<br></br>\r\n<br></br>\r\n\r\n\r\nExample of an Explicit Cursor:<br></br>\r\n<br></br>\r\n\r\n\r\nDECLARE<br></br>\r\n\r\n    CURSOR employee_cursor IS<br></br>\r\n\r\n        SELECT employee_id, first_name, last_name FROM employees WHERE department_id = 30;<br></br>\r\n\t\t<br></br>\r\n\r\n        \r\n    emp_id employees.employee_id%TYPE;<br></br>\r\n\r\n    emp_first_name employees.first_name%TYPE;<br></br>\r\n\r\n    emp_last_name employees.last_name%TYPE;<br></br>\r\n\r\nBEGIN<br></br>\r\n\r\n    OPEN employee_cursor;<br></br>\r\n\r\n    LOOP<br></br>\r\n\r\n        FETCH employee_cursor INTO emp_id, emp_first_name, emp_last_name;<br></br>\r\n\r\n        EXIT WHEN employee_cursor%NOTFOUND;<br></br>\r\n\r\n        \r\n        DBMS_OUTPUT.PUT_LINE('Employee ID: ' || emp_id || ', Name: ' || emp_first_name || ' ' || emp_last_name);<br></br>\r\n\r\n    END LOOP;<br></br>\r\n\r\n    CLOSE employee_cursor;<br></br>\r\n\r\nEXCEPTION<br></br>\r\n\r\n    WHEN OTHERS THEN<br></br>\r\n\r\n        DBMS_OUTPUT.PUT_LINE('An error occurred.');<br></br>\r\n\r\nEND;<br></br>\r\n<br></br>\r\n\r\n\r\nExplanation:<br></br>\r\n\r\nIn this example, the explicit cursor employee_cursor retrieves employee details from the employees table for the employees in department 30. The data is fetched row by row, and each employee's ID and name are displayed using DBMS_OUTPUT.PUT_LINE.\r\n<br></br><br></br>\r\n\r\n\r\nAdvantages of Cursors:<br></br>\r\n\r\n\r\nCursors enable processing of query results one row at a time, reducing memory consumption for large datasets.<br></br>\r\n\r\nCursors provide control over query execution and result processing.<br></br>\r\n\r\nThey can help in performing complex calculations and transformations on the retrieved data.<br></br>\r\n\r\n<br></br>\r\n\r\nConsiderations:<br></br>\r\n\r\nExplicit cursors require manual opening, fetching, and closing, which can lead to additional coding and potential errors.<br></br>\r\n\r\nCursors should be closed after use to release resources.<br></br>\r\n\r\n<br></br>\r\n\r\nConclusion:<br></br>\r\n\r\nPL/SQL cursors, both implicit and explicit, offer a powerful mechanism for working with query results in a controlled and efficient manner. Explicit cursors provide developers with more control over the retrieval and processing of data from query results, making them invaluable tools when dealing with complex operations on database data.\r\n<br></br>\r\n\r\n\t\t\t\t </p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default Cursors\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Pposttest.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Procedure.js",["295","296"],[],"import React from 'react'\r\nimport PlsqlMenu from './PlsqlMenu'\r\nimport Layout from '../Layout'\r\nimport one from \"./plsql_pro_1.PNG\";\r\nimport two from \"./plsql_pro_2.PNG\";\r\nconst Procedure = () => {\r\n  return (\r\n\t<div>\r\n\t  <Layout >\r\n\t\t  <div className=\"container-flui m-3 p-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t  <div className=\"col-md-3\">\r\n\t\t\t   <PlsqlMenu/>\r\n\t\t\t  </div>\r\n\t\t\t  <div className=\"col-md-9\">\r\n\t\t\t \r\n\t\t\t\t <h1>PL/SQL Procedures </h1>\r\n\t\t\t\t <p>\r\n\t\t\t\t PL/SQL (Procedural Language/Structured Query Language) is an extension of SQL that adds procedural programming capabilities to SQL. PL/SQL procedures are a key feature of PL/SQL and serve as a way to encapsulate a sequence of SQL and procedural statements into a reusable and modular unit. Procedures enhance the power of SQL by allowing developers to create custom logic and control structures.\r\n<br></br>\r\n<br></br>\r\n\r\nBenefits of Using Procedures:<br></br>\r\n<br></br>\r\n\r\n\r\nModularity: Procedures encapsulate a set of related SQL and PL/SQL statements into a single unit. This enhances code reusability and maintainability.<br></br>\r\n\r\nAbstraction: Procedures allow developers to abstract complex operations into a single callable entity, making the code more understandable.<br></br>\r\n\r\nSecurity: Procedures can provide controlled access to data, as users interact with the database only through the predefined interface of the procedure.<br></br>\r\n\r\nPerformance: Compiled PL/SQL procedures are stored in the database and executed faster than equivalent SQL statements executed individually.<br></br>\r\n\r\nError Handling: Procedures enable centralized error handling, making it easier to manage exceptions and errors.<br></br>\r\n<br></br>\r\n\r\n\r\nSyntax of a PL/SQL Procedure:<br></br>\r\n<div>\r\n  <img src={one} alt=\"Image of plsql_pro_1\" />\r\n</div>\r\n\r\n\r\n\r\n\r\nExplanation:<br></br>\r\n<br></br>\r\nCREATE [OR REPLACE] PROCEDURE: Defines the beginning of a procedure declaration.<br></br>\r\nprocedure_name: Name of the procedure.<br></br>\r\nparameter_name: Name of the input or output parameter passed to the procedure.<br></br>\r\nparameter_type: Data type of the parameter.<br></br>\r\nIS: Marks the beginning of the procedure body.<br></br>\r\nBEGIN: Marks the start of the procedural statements.<br></br>\r\nEXCEPTION: Handles exceptions raised during procedure execution.<br></br>\r\n<br></br>\r\n\r\n\r\nExample of a PL/SQL Procedure:<br></br>\r\n<div>\r\n  <img src={two} alt=\"Image of plsql_pro_2\" />\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nExplanation:<br></br>\r\nIn this example, the procedure CalculateSalary takes an employee ID as input, retrieves the employee's salary from the database, increases it by 10%, and updates the salary. It demonstrates the use of procedural statements like SELECT, UPDATE, and exception handling.\r\n<br></br>\r\nCalling a PL/SQL Procedure:<br></br><br></br>\r\n\r\nYou can call a PL/SQL procedure using the following syntax:<br></br>\r\nEXECUTE procedure_name(parameters);\r\n<br></br><br></br>\r\nFor the above example:<br></br>\r\nEXECUTE CalculateSalary(101);<br></br><br></br>\r\n\r\nConclusion:<br></br>\r\nPL/SQL procedures are a powerful feature of PL/SQL that allow developers to create modular, efficient, and reusable code units. By encapsulating both SQL and procedural statements, procedures enhance the capabilities of SQL and provide a structured approach to developing database-centric applications.\r\n<br></br>\r\n\r\n\t\t\t\t </p>\r\n\t\t\t\t\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n\t\t  </div>\r\n\t\t</Layout>\r\n\t</div>\r\n  )\r\n}\r\n\r\nexport default Procedure\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Prefnfeed.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Ppretest.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Triggers.js",["297","298","299"],[],"\r\n\r\nimport React from 'react'\r\nimport PlsqlMenu from './PlsqlMenu'\r\nimport Layout from '../Layout'\r\nimport one from \"./plsql_tri_1.PNG\";\r\nimport two from \"./plsql_tri_2.PNG\";\r\nconst Triggers = () => {\r\n  return (\r\n    <div>\r\n    <Layout >\r\n        <div className=\"container-flui m-3 p-3\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-3\">\r\n             <PlsqlMenu/>\r\n            </div>\r\n            <div className=\"col-md-9\">\r\n           \r\n               <h1>PL/SQL Trigger</h1>\r\n               <p>\r\n               <br></br>\r\n\r\nA PL/SQL trigger is a database object that defines an automatic action to be performed in response to specific events or changes that occur in a database. Triggers are often used to enforce data integrity, implement business logic, or maintain audit trails. They are a crucial component of a database management system's capability to automate and ensure consistent behavior.\r\n<br></br><br></br>\r\n\r\nTypes of Triggers:<br></br>\r\n<br></br>\r\n\r\n\r\nDML Triggers: Fired in response to Data Manipulation Language (DML) statements like INSERT, UPDATE, and DELETE.<br></br>\r\n\r\nDDL Triggers: Fired in response to Data Definition Language (DDL) statements like CREATE, ALTER, and DROP.<br></br>\r\n\r\nSystem Triggers: Fired in response to system-level events like database startup or shutdown.<br></br>\r\n<br></br>\r\n\r\nSyntax of a DML Trigger:\r\n<div>\r\n  <img src={one} alt=\"Image of plsql_tri_1\" />\r\n</div>\r\n\r\n<br></br>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nExplanation:<br></br>\r\n\r\nCREATE OR REPLACE TRIGGER: Defines the beginning of a trigger declaration.<br></br>\r\n\r\ntrigger_name: Name of the trigger.<br></br>\r\n\r\nBEFORE or AFTER: Specifies when the trigger fires (before or after the triggering event).<br></br>\r\n\r\nINSERT, UPDATE, or DELETE: Specifies the triggering event.<br></br>\r\n\r\nON table_name: Specifies the table on which the trigger operates.<br></br>\r\n\r\nFOR EACH ROW: Specifies that the trigger operates for each affected row.<br></br>\r\n\r\nDECLARE: Marks the beginning of the declaration section (optional).<br></br>\r\n\r\nBEGIN: Marks the start of the trigger body (SQL and PL/SQL statements).<br></br>\r\n\r\nEXCEPTION: Handles exceptions raised during trigger execution.<br></br>\r\n<br></br>\r\n\r\n\r\n\r\nExample of a DML Trigger:\r\n<div>\r\n  <img src={one} alt=\"Image of plsql_tri_1\" />\r\n</div>\r\n\r\n\r\n<br></br>\r\n\r\nExplanation:<br></br>\r\n\r\nIn this example, the trigger AuditEmployeeChanges fires before an INSERT or UPDATE operation on the employees table. For each affected row (:NEW refers to the new row being inserted or updated), the trigger captures the employee_id, the action performed (INSERT or UPDATE), and the current date into an audit_log table.\r\n<br></br>\r\n<br></br>\r\n\r\nCalling a Trigger:<br></br>\r\n\r\nTriggers are automatically invoked by the database system in response to the specified triggering events. You don't directly call a trigger; rather, the trigger is triggered by the specified event.\r\n<br></br>\r\n<br></br>\r\n\r\nAdvantages of Triggers:<br></br>\r\n\r\n\r\nData Integrity: Triggers can enforce complex integrity rules automatically.<br></br>\r\n\r\nBusiness Logic: They allow encapsulation of business rules directly in the database.<br></br>\r\n\r\nAudit Trail: Triggers can maintain logs of changes for auditing purposes.<br></br>\r\n\r\nConsistency: Triggers ensure consistent behavior for database operations.<br></br>\r\n<br></br>\r\n\r\n\r\n\r\nConsiderations:<br></br>\r\n\r\nOverusing triggers can lead to complex and hard-to-maintain code.<br></br>\r\n\r\nTriggers can affect performance, so they should be used judiciously.<br></br>\r\n<br></br>\r\n\r\n\r\nConclusion:<br></br>\r\n\r\nPL/SQL triggers are a powerful mechanism for automating actions based on specific events in a database. They play a crucial role in maintaining data integrity, implementing business logic, and enabling auditing. Understanding triggers and their appropriate usage is important to harness their benefits effectively while ensuring efficient and maintainable database systems.\r\n<br></br>\r\n\r\n</p>\r\n              \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Triggers\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\Paimobj.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\DataMenu.js",["300"],[],"import React from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nconst DataMenu = () => {\r\n\treturn (\r\n\t\t<></>\r\n\t  );\r\n}\r\n\r\nexport default DataMenu\r\n\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Layout.js",["301"],[],"import React from \"react\";\r\nimport Footer from \"./Footer\";\r\nimport Header from \"./Header\";\r\n \r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <div>\r\n   \r\n      <Header />\r\n      <main style={{ minHeight: \"70vh\", marginTop: \"30px\" ,alignContent:\"left\", padding:\"20px\"\r\n      }}>\r\n      \r\n    \r\n        {children}\r\n      </main>\r\n      {/* <Footer /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nLayout.defaultProps = {\r\n  title: \"DATA STRUCTURE\",\r\n  description: \"mern stack project\",\r\n  keywords: \"mern,react,node,mongodb\",\r\n  author: \"summer-term\",\r\n};\r\n\r\nexport default Layout;\r\n","C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\normalization\\NormalMenu.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Transaction\\TransMenu.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\PLSQL\\PlsqlMenu.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\SQL\\SqlMenu.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Header.js",[],[],"C:\\Users\\mihir\\OneDrive\\Desktop\\New folder\\virtual_lab\\src\\Layout\\Footer.js",[],[],{"ruleId":"302","severity":1,"message":"303","line":3,"column":8,"nodeType":"304","messageId":"305","endLine":3,"endColumn":16},{"ruleId":"302","severity":1,"message":"303","line":3,"column":8,"nodeType":"304","messageId":"305","endLine":3,"endColumn":16},{"ruleId":"302","severity":1,"message":"303","line":2,"column":8,"nodeType":"304","messageId":"305","endLine":2,"endColumn":16},{"ruleId":"302","severity":1,"message":"303","line":3,"column":8,"nodeType":"304","messageId":"305","endLine":3,"endColumn":16},{"ruleId":"302","severity":1,"message":"303","line":3,"column":8,"nodeType":"304","messageId":"305","endLine":3,"endColumn":16},{"ruleId":"306","severity":1,"message":"307","line":33,"column":3,"nodeType":"308","endLine":33,"endColumn":40},{"ruleId":"306","severity":1,"message":"307","line":46,"column":3,"nodeType":"308","endLine":46,"endColumn":40},{"ruleId":"306","severity":1,"message":"307","line":51,"column":3,"nodeType":"308","endLine":51,"endColumn":42},{"ruleId":"306","severity":1,"message":"307","line":41,"column":3,"nodeType":"308","endLine":41,"endColumn":40},{"ruleId":"306","severity":1,"message":"307","line":48,"column":3,"nodeType":"308","endLine":48,"endColumn":40},{"ruleId":"306","severity":1,"message":"307","line":33,"column":3,"nodeType":"308","endLine":33,"endColumn":40},{"ruleId":"306","severity":1,"message":"307","line":51,"column":3,"nodeType":"308","endLine":51,"endColumn":40},{"ruleId":"306","severity":1,"message":"307","line":58,"column":3,"nodeType":"308","endLine":58,"endColumn":42},{"ruleId":"306","severity":1,"message":"307","line":33,"column":3,"nodeType":"308","endLine":33,"endColumn":40},{"ruleId":"306","severity":1,"message":"307","line":43,"column":3,"nodeType":"308","endLine":43,"endColumn":40},{"ruleId":"306","severity":1,"message":"307","line":48,"column":3,"nodeType":"308","endLine":48,"endColumn":42},{"ruleId":"306","severity":1,"message":"307","line":54,"column":3,"nodeType":"308","endLine":54,"endColumn":41},{"ruleId":"306","severity":1,"message":"307","line":64,"column":3,"nodeType":"308","endLine":64,"endColumn":40},{"ruleId":"306","severity":1,"message":"307","line":80,"column":3,"nodeType":"308","endLine":80,"endColumn":40},{"ruleId":"306","severity":1,"message":"307","line":87,"column":3,"nodeType":"308","endLine":87,"endColumn":42},{"ruleId":"306","severity":1,"message":"307","line":95,"column":3,"nodeType":"308","endLine":95,"endColumn":41},{"ruleId":"302","severity":1,"message":"309","line":3,"column":8,"nodeType":"304","messageId":"305","endLine":3,"endColumn":18},{"ruleId":"302","severity":1,"message":"309","line":3,"column":8,"nodeType":"304","messageId":"305","endLine":3,"endColumn":18},{"ruleId":"306","severity":1,"message":"307","line":31,"column":3,"nodeType":"308","endLine":31,"endColumn":47},{"ruleId":"306","severity":1,"message":"307","line":46,"column":3,"nodeType":"308","endLine":46,"endColumn":47},{"ruleId":"306","severity":1,"message":"307","line":34,"column":3,"nodeType":"308","endLine":34,"endColumn":47},{"ruleId":"306","severity":1,"message":"307","line":41,"column":3,"nodeType":"308","endLine":41,"endColumn":47},{"ruleId":"306","severity":1,"message":"307","line":61,"column":3,"nodeType":"308","endLine":61,"endColumn":47},{"ruleId":"302","severity":1,"message":"310","line":7,"column":8,"nodeType":"304","messageId":"305","endLine":7,"endColumn":11},{"ruleId":"306","severity":1,"message":"307","line":39,"column":3,"nodeType":"308","endLine":39,"endColumn":47},{"ruleId":"306","severity":1,"message":"307","line":75,"column":3,"nodeType":"308","endLine":75,"endColumn":47},{"ruleId":"302","severity":1,"message":"311","line":2,"column":10,"nodeType":"304","messageId":"305","endLine":2,"endColumn":17},{"ruleId":"302","severity":1,"message":"312","line":2,"column":8,"nodeType":"304","messageId":"305","endLine":2,"endColumn":14},"no-unused-vars","'DataMenu' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'NormalMenu' is defined but never used.","'two' is defined but never used.","'NavLink' is defined but never used.","'Footer' is defined but never used."]